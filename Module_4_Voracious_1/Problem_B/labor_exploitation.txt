
Suppose there is an app for hiring people to do household tasks, such as fixing a pipe or repairing an electrical 
circuit—things of that nature. On a particular day, one of the workers, whom we'll call Francisco, has 𝑁 jobs to do,
but he can only complete one at a time. For each job 𝑖, the time it takes him to complete it is known (1≤𝑡𝑖≤1200).

The problem is that Francisco's employers (i.e., the users of the app) are very impatient and want their jobs 
done immediately, without considering that Francisco has other jobs to complete. In fact, for each minute that 
Francisco is delayed in delivering job 𝑖 beyond the time it takes him to complete it, he has to pay a fine in cents.
Therefore, when Francisco has multiple jobs to do, he often earns very little or even ends up owing more in fines 
than he earns. Francisco cannot reject jobs, as that would decrease his rating in the app, and no one would want to hire him.

For example, if Francisco has three jobs that take him 30, 10, and 20 minutes respectively, with corresponding fines 
of 40, 100, and 20 cents, the best he can do is finish the 10-minute job first, then the 30-minute one, and then the 
20-minute one. This results in a total fine of 400 + 800 = 1200 cents.

Input
The input begins with a line containing a positive integer 𝐶, no greater than 5, representing the number of test cases. 
Each case begins with a line containing the number 𝑁 of jobs (1≤𝑁≤5000) that Francisco has to do. The following 𝑁 lines 
contain two integers separated by a space: the time in minutes 𝑡𝑖 that job 𝑖 takes (1≤𝑡𝑖≤360) and the fine 𝑐𝑖 in cents 
(1≤𝑐𝑖≤100) for job 𝑖.

Output
The output must contain 𝐶 lines, each with the minimum fine in cents that Francisco has to pay for each case.

Example:
Input 
2
3
30 40
10 100
20 20
4
80 5
60 10
40 20
20 30

Output
1200
1600